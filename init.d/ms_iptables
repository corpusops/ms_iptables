#!/bin/sh
### BEGIN INIT INFO
# Provides:          ms_iptables
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Should-Start:      libvirtd NetworkManager lxc-net-makina lxc-net docker-net-makina docker-net docker openvpn
# Should-Stop:       libvirtd NetworkManager lxc-net-makina lxc-net docker-net-makina docker-net docker openvpn
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: iptables firewall
# Description:       ms_iptables is a simple iptable based firewall
### END INIT INFO

#
# Author: Makina Corpus <freesoftware@makina-corpus.com>
#


RUN_TEST=/run/ms_iptables_loaded

has_command() {
    ret=1
    if which which >/dev/null 2>/dev/null;then
      if which "${@}" >/dev/null 2>/dev/null;then
        ret=0
      fi
    else
      if command -v "${@}" >/dev/null 2>/dev/null;then
        ret=0
      else
        if hash -r "${@}" >/dev/null 2>/dev/null;then
            ret=0
        fi
      fi
    fi
    return ${ret}
}


PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="dynamic firewall daemon (iptables)"
NAME=ms_iptables

DAEMON=/usr/bin/ms_iptables.py

SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
if [ ! -x "${DAEMON}" ];then
    echo "ms_iptables.py is not installed"
    exit 0
fi
if [  -f "/etc/default/$NAME" ];then . "/etc/default/$NAME";fi

# Define LSB log_* functions.
. /lib/lsb/init-functions



ensure_drtdir()
{
    drtdir=$(dirname "$RUN_TEST")
    if [ ! -e "$drtdir" ];then
        mkdir -p "$drtdir"
    fi
}

do_stop()
{
    ret=0
    if [ "x${MS_IPTABLES_DISABLED}" = "x" ];then
        "${DAEMON}" --stop
        ret=$?
        if [ "x${ret}" = "x0" ] && [ -e "$RUN_TEST" ];then
            rm -f "$RUN_TEST"
        fi
    else
        echo "$0: ms_iptables is disabled"
    fi
    return $ret
}

do_start()
{
    ret=0
    if [ "x${MS_IPTABLES_DISABLED}" = "x" ];then
        "${DAEMON}"
        ret=$?
        if [ "x${ret}" = "x0" ];then
            ensure_drtdir
            touch "$RUN_TEST"
        fi
    else
        echo "$0: ms_iptables is disabled"
    fi
    return $ret
}

do_reload()
{
    if [ "x${MS_IPTABLES_DISABLED}" = "x" ];then
        do_stop
        do_start
    else
        echo "$0: ms_iptables is disabled"
    fi
    return $?

}

case "$1" in
  start)
      log_daemon_msg "Starting $DESC" "$NAME"
      do_start
      log_end_msg $?
      ;;
  stop)
      log_daemon_msg "Stopping $DESC" "$NAME"
      do_stop
      log_end_msg $?
      ;;
  reload|force-reload)
      log_daemon_msg "Reloading $DESC" "$NAME"
      do_reload
      log_end_msg $?
      ;;
  restart)
      "$0" stop
      "$0" start
      ;;
  status)
      if ( has_command systemctl && systemctl is-system-running | egrep -q "unknown|offline|initializing"; );then
          ret=$(systemctl status ms_iptables 1>/dev/null 2>&1 && echo $?; )
      else
          if [ -e "$RUN_TEST" ];then
              ret=0
          else
              ret=3
          fi
      fi
      exit $ret
      ;;
  *)
      echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload|reload|status}" >&2
      exit 3
      ;;
esac
